<snippet>
	<content><![CDATA[
#include <algorithm>
#include <array>
#include <bitset>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <vector>

using namespace std;

// Disable sync for cin/cout with stdio
const bool fast_cpp_stdio_enabled = false;

// Read number of test cases
const bool many_test_cases = true;

// Const value: Infinity
const int INF = 1e9;

// %lld
typedef long long ll;
// %llu
typedef long long unsigned llu;
// %Lf
typedef long double ld;

// Global integer number
using dint = int;
// Global floating point number
using dfloat = double;

// Low to high
typedef priority_queue<dint, vector<dint>, less<dint>> pqueue_upper;
// High to low
typedef priority_queue<dint, vector<dint>, greater<dint>> pqueue_lower;
typedef pair<int, int> point;

#define fast_cpp_stdio ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr)
#define printline putchar('\n')
#define printspace putchar(' ')

#define sfor(i, l, r) for (dint i = l; i < (dint)r; ++i)
#define sefor(i, l, r) for (dint i = l; i <= (dint)r; ++i)
#define efor(i, r, l) for (dint i = r; i > (dint)l; --i)
#define eefor(i, r, l) for (dint i = r; i >= (dint)l; --i)

#define all(x) x.begin(), x.end()
#define arr(len, type) array<len, type>
#define x(po) po.first
#define y(po) po.second

#define endl '\n'

inline dint read() {
    dint x=0,w=1;char ch=getchar();
    while(ch>'9'||ch<'0'){if(ch=='-')w=-1;ch=getchar();}
    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();
    return x * w;
}

inline void write(dint x) {
	if(x<0)putchar('-'),x=-x;
	if(x>9)write(x/10);
	putchar(x%10+'0');
}

void solve() {
	${1:// code here}
}

int main() {
    int t = 1;
    if (many_test_cases) {
    	if (fast_cpp_stdio_enabled) {
			fast_cpp_stdio;
    		cin >> t;
    	} else {
    		t = read();
    	}
    }
    while (t--)
    	solve();
	return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>acm_template</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
